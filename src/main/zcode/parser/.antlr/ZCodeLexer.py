# Generated from d:/studying/BTL_PPL_HK232/src/main/zcode/parser/ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,54,394,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,1,0,1,0,1,0,1,0,1,0,1,1,1,
        1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
        3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,
        6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
        9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,
        1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,
        1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,
        1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,
        1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,
        1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,
        1,34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,
        1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,5,44,
        285,8,44,10,44,12,44,288,9,44,1,45,1,45,1,45,5,45,293,8,45,10,45,
        12,45,296,9,45,3,45,298,8,45,1,45,3,45,301,8,45,1,46,4,46,304,8,
        46,11,46,12,46,305,1,47,1,47,3,47,310,8,47,1,47,4,47,313,8,47,11,
        47,12,47,314,1,48,1,48,1,48,1,48,1,48,1,48,5,48,323,8,48,10,48,12,
        48,326,9,48,1,48,1,48,1,48,1,49,1,49,3,49,333,8,49,1,50,1,50,1,51,
        1,51,1,51,1,51,5,51,341,8,51,10,51,12,51,344,9,51,1,51,1,51,1,52,
        4,52,349,8,52,11,52,12,52,350,1,52,1,52,1,53,1,53,1,53,1,54,1,54,
        1,54,1,54,1,54,1,54,5,54,364,8,54,10,54,12,54,367,9,54,1,54,1,54,
        1,54,1,54,3,54,373,8,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,
        5,55,383,8,55,10,55,12,55,386,9,55,1,55,1,55,1,55,3,55,391,8,55,
        1,55,1,55,0,0,56,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,
        44,89,45,91,46,93,0,95,0,97,47,99,48,101,49,103,50,105,51,107,52,
        109,53,111,54,1,0,11,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
        97,122,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,4,0,10,10,13,
        13,34,34,92,92,7,0,39,39,92,92,98,98,102,102,110,110,114,114,116,
        116,1,0,10,10,2,0,10,10,13,13,3,0,8,9,12,13,32,32,1,0,13,13,413,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
        1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
        1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,
        105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,1,113,1,0,
        0,0,3,118,1,0,0,0,5,124,1,0,0,0,7,131,1,0,0,0,9,136,1,0,0,0,11,143,
        1,0,0,0,13,150,1,0,0,0,15,154,1,0,0,0,17,162,1,0,0,0,19,167,1,0,
        0,0,21,171,1,0,0,0,23,177,1,0,0,0,25,180,1,0,0,0,27,186,1,0,0,0,
        29,195,1,0,0,0,31,198,1,0,0,0,33,203,1,0,0,0,35,208,1,0,0,0,37,214,
        1,0,0,0,39,218,1,0,0,0,41,222,1,0,0,0,43,226,1,0,0,0,45,229,1,0,
        0,0,47,232,1,0,0,0,49,234,1,0,0,0,51,236,1,0,0,0,53,238,1,0,0,0,
        55,240,1,0,0,0,57,242,1,0,0,0,59,244,1,0,0,0,61,247,1,0,0,0,63,250,
        1,0,0,0,65,252,1,0,0,0,67,255,1,0,0,0,69,257,1,0,0,0,71,260,1,0,
        0,0,73,262,1,0,0,0,75,265,1,0,0,0,77,269,1,0,0,0,79,272,1,0,0,0,
        81,274,1,0,0,0,83,276,1,0,0,0,85,278,1,0,0,0,87,280,1,0,0,0,89,282,
        1,0,0,0,91,289,1,0,0,0,93,303,1,0,0,0,95,307,1,0,0,0,97,316,1,0,
        0,0,99,332,1,0,0,0,101,334,1,0,0,0,103,336,1,0,0,0,105,348,1,0,0,
        0,107,354,1,0,0,0,109,357,1,0,0,0,111,376,1,0,0,0,113,114,5,116,
        0,0,114,115,5,114,0,0,115,116,5,117,0,0,116,117,5,101,0,0,117,2,
        1,0,0,0,118,119,5,102,0,0,119,120,5,97,0,0,120,121,5,108,0,0,121,
        122,5,115,0,0,122,123,5,101,0,0,123,4,1,0,0,0,124,125,5,110,0,0,
        125,126,5,117,0,0,126,127,5,109,0,0,127,128,5,98,0,0,128,129,5,101,
        0,0,129,130,5,114,0,0,130,6,1,0,0,0,131,132,5,98,0,0,132,133,5,111,
        0,0,133,134,5,111,0,0,134,135,5,108,0,0,135,8,1,0,0,0,136,137,5,
        115,0,0,137,138,5,116,0,0,138,139,5,114,0,0,139,140,5,105,0,0,140,
        141,5,110,0,0,141,142,5,103,0,0,142,10,1,0,0,0,143,144,5,114,0,0,
        144,145,5,101,0,0,145,146,5,116,0,0,146,147,5,117,0,0,147,148,5,
        114,0,0,148,149,5,110,0,0,149,12,1,0,0,0,150,151,5,118,0,0,151,152,
        5,97,0,0,152,153,5,114,0,0,153,14,1,0,0,0,154,155,5,100,0,0,155,
        156,5,121,0,0,156,157,5,110,0,0,157,158,5,97,0,0,158,159,5,109,0,
        0,159,160,5,105,0,0,160,161,5,99,0,0,161,16,1,0,0,0,162,163,5,102,
        0,0,163,164,5,117,0,0,164,165,5,110,0,0,165,166,5,99,0,0,166,18,
        1,0,0,0,167,168,5,102,0,0,168,169,5,111,0,0,169,170,5,114,0,0,170,
        20,1,0,0,0,171,172,5,117,0,0,172,173,5,110,0,0,173,174,5,116,0,0,
        174,175,5,105,0,0,175,176,5,108,0,0,176,22,1,0,0,0,177,178,5,98,
        0,0,178,179,5,121,0,0,179,24,1,0,0,0,180,181,5,98,0,0,181,182,5,
        114,0,0,182,183,5,101,0,0,183,184,5,97,0,0,184,185,5,107,0,0,185,
        26,1,0,0,0,186,187,5,99,0,0,187,188,5,111,0,0,188,189,5,110,0,0,
        189,190,5,116,0,0,190,191,5,105,0,0,191,192,5,110,0,0,192,193,5,
        117,0,0,193,194,5,101,0,0,194,28,1,0,0,0,195,196,5,105,0,0,196,197,
        5,102,0,0,197,30,1,0,0,0,198,199,5,101,0,0,199,200,5,108,0,0,200,
        201,5,115,0,0,201,202,5,101,0,0,202,32,1,0,0,0,203,204,5,101,0,0,
        204,205,5,108,0,0,205,206,5,105,0,0,206,207,5,102,0,0,207,34,1,0,
        0,0,208,209,5,98,0,0,209,210,5,101,0,0,210,211,5,103,0,0,211,212,
        5,105,0,0,212,213,5,110,0,0,213,36,1,0,0,0,214,215,5,101,0,0,215,
        216,5,110,0,0,216,217,5,100,0,0,217,38,1,0,0,0,218,219,5,110,0,0,
        219,220,5,111,0,0,220,221,5,116,0,0,221,40,1,0,0,0,222,223,5,97,
        0,0,223,224,5,110,0,0,224,225,5,100,0,0,225,42,1,0,0,0,226,227,5,
        111,0,0,227,228,5,114,0,0,228,44,1,0,0,0,229,230,5,60,0,0,230,231,
        5,45,0,0,231,46,1,0,0,0,232,233,5,43,0,0,233,48,1,0,0,0,234,235,
        5,45,0,0,235,50,1,0,0,0,236,237,5,42,0,0,237,52,1,0,0,0,238,239,
        5,47,0,0,239,54,1,0,0,0,240,241,5,37,0,0,241,56,1,0,0,0,242,243,
        5,33,0,0,243,58,1,0,0,0,244,245,5,38,0,0,245,246,5,38,0,0,246,60,
        1,0,0,0,247,248,5,124,0,0,248,249,5,124,0,0,249,62,1,0,0,0,250,251,
        5,61,0,0,251,64,1,0,0,0,252,253,5,33,0,0,253,254,5,61,0,0,254,66,
        1,0,0,0,255,256,5,60,0,0,256,68,1,0,0,0,257,258,5,60,0,0,258,259,
        5,61,0,0,259,70,1,0,0,0,260,261,5,62,0,0,261,72,1,0,0,0,262,263,
        5,62,0,0,263,264,5,61,0,0,264,74,1,0,0,0,265,266,5,46,0,0,266,267,
        5,46,0,0,267,268,5,46,0,0,268,76,1,0,0,0,269,270,5,61,0,0,270,271,
        5,61,0,0,271,78,1,0,0,0,272,273,5,91,0,0,273,80,1,0,0,0,274,275,
        5,93,0,0,275,82,1,0,0,0,276,277,5,40,0,0,277,84,1,0,0,0,278,279,
        5,41,0,0,279,86,1,0,0,0,280,281,5,44,0,0,281,88,1,0,0,0,282,286,
        7,0,0,0,283,285,7,1,0,0,284,283,1,0,0,0,285,288,1,0,0,0,286,284,
        1,0,0,0,286,287,1,0,0,0,287,90,1,0,0,0,288,286,1,0,0,0,289,297,3,
        93,46,0,290,294,5,46,0,0,291,293,3,93,46,0,292,291,1,0,0,0,293,296,
        1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,298,1,0,0,0,296,294,
        1,0,0,0,297,290,1,0,0,0,297,298,1,0,0,0,298,300,1,0,0,0,299,301,
        3,95,47,0,300,299,1,0,0,0,300,301,1,0,0,0,301,92,1,0,0,0,302,304,
        7,2,0,0,303,302,1,0,0,0,304,305,1,0,0,0,305,303,1,0,0,0,305,306,
        1,0,0,0,306,94,1,0,0,0,307,309,7,3,0,0,308,310,7,4,0,0,309,308,1,
        0,0,0,309,310,1,0,0,0,310,312,1,0,0,0,311,313,7,2,0,0,312,311,1,
        0,0,0,313,314,1,0,0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,96,1,0,
        0,0,316,324,5,34,0,0,317,323,8,5,0,0,318,319,5,92,0,0,319,323,7,
        6,0,0,320,321,5,39,0,0,321,323,5,34,0,0,322,317,1,0,0,0,322,318,
        1,0,0,0,322,320,1,0,0,0,323,326,1,0,0,0,324,322,1,0,0,0,324,325,
        1,0,0,0,325,327,1,0,0,0,326,324,1,0,0,0,327,328,5,34,0,0,328,329,
        6,48,0,0,329,98,1,0,0,0,330,333,3,1,0,0,331,333,3,3,1,0,332,330,
        1,0,0,0,332,331,1,0,0,0,333,100,1,0,0,0,334,335,7,7,0,0,335,102,
        1,0,0,0,336,337,5,35,0,0,337,338,5,35,0,0,338,342,1,0,0,0,339,341,
        8,8,0,0,340,339,1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,
        1,0,0,0,343,345,1,0,0,0,344,342,1,0,0,0,345,346,6,51,1,0,346,104,
        1,0,0,0,347,349,7,9,0,0,348,347,1,0,0,0,349,350,1,0,0,0,350,348,
        1,0,0,0,350,351,1,0,0,0,351,352,1,0,0,0,352,353,6,52,1,0,353,106,
        1,0,0,0,354,355,9,0,0,0,355,356,6,53,2,0,356,108,1,0,0,0,357,365,
        5,34,0,0,358,364,8,5,0,0,359,360,5,92,0,0,360,364,7,6,0,0,361,362,
        5,39,0,0,362,364,5,34,0,0,363,358,1,0,0,0,363,359,1,0,0,0,363,361,
        1,0,0,0,364,367,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,372,
        1,0,0,0,367,365,1,0,0,0,368,373,5,0,0,1,369,370,5,13,0,0,370,373,
        5,10,0,0,371,373,5,10,0,0,372,368,1,0,0,0,372,369,1,0,0,0,372,371,
        1,0,0,0,373,374,1,0,0,0,374,375,6,54,3,0,375,110,1,0,0,0,376,384,
        5,34,0,0,377,383,8,5,0,0,378,379,5,92,0,0,379,383,7,6,0,0,380,381,
        5,39,0,0,381,383,5,34,0,0,382,377,1,0,0,0,382,378,1,0,0,0,382,380,
        1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,390,
        1,0,0,0,386,384,1,0,0,0,387,391,7,10,0,0,388,389,5,92,0,0,389,391,
        8,6,0,0,390,387,1,0,0,0,390,388,1,0,0,0,391,392,1,0,0,0,392,393,
        6,55,4,0,393,112,1,0,0,0,19,0,286,294,297,300,305,309,314,322,324,
        332,342,350,363,365,372,382,384,390,5,1,48,0,6,0,0,1,53,1,1,54,2,
        1,55,3
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TRUE = 1
    FALSE = 2
    NUMBER = 3
    BOOL = 4
    STRING = 5
    RETURN = 6
    VAR = 7
    DYNAMIC = 8
    FUNC = 9
    FOR = 10
    UNTIL = 11
    BY = 12
    BREAK = 13
    CONTINUE = 14
    IF = 15
    ELSE = 16
    ELIF = 17
    BEGIN = 18
    END = 19
    NOT = 20
    AND = 21
    OR = 22
    ASSIGNINIT = 23
    ADD = 24
    SUB = 25
    MUL = 26
    DIV = 27
    MODUL = 28
    NOT_OP = 29
    AND_OP = 30
    OR_OP = 31
    ASSIGN = 32
    NOT_EQUAL = 33
    LESS_THAN = 34
    LESS_OR_EQUAL = 35
    GREATER_THAN = 36
    GREATER_OR_EQUAL = 37
    CONCAT = 38
    EQUAL = 39
    LBRACKET = 40
    RBRACKET = 41
    LPAREN = 42
    RPAREN = 43
    COMMA = 44
    ID = 45
    NUMBER_LIT = 46
    STRING_LIT = 47
    BOOLEAN_LIT = 48
    NEWLINE = 49
    COMMENTS = 50
    WS = 51
    ERROR_CHAR = 52
    UNCLOSE_STRING = 53
    ILLEGAL_ESCAPE = 54

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'true'", "'false'", "'number'", "'bool'", "'string'", "'return'", 
            "'var'", "'dynamic'", "'func'", "'for'", "'until'", "'by'", 
            "'break'", "'continue'", "'if'", "'else'", "'elif'", "'begin'", 
            "'end'", "'not'", "'and'", "'or'", "'<-'", "'+'", "'-'", "'*'", 
            "'/'", "'%'", "'!'", "'&&'", "'||'", "'='", "'!='", "'<'", "'<='", 
            "'>'", "'>='", "'...'", "'=='", "'['", "']'", "'('", "')'", 
            "','" ]

    symbolicNames = [ "<INVALID>",
            "TRUE", "FALSE", "NUMBER", "BOOL", "STRING", "RETURN", "VAR", 
            "DYNAMIC", "FUNC", "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", 
            "IF", "ELSE", "ELIF", "BEGIN", "END", "NOT", "AND", "OR", "ASSIGNINIT", 
            "ADD", "SUB", "MUL", "DIV", "MODUL", "NOT_OP", "AND_OP", "OR_OP", 
            "ASSIGN", "NOT_EQUAL", "LESS_THAN", "LESS_OR_EQUAL", "GREATER_THAN", 
            "GREATER_OR_EQUAL", "CONCAT", "EQUAL", "LBRACKET", "RBRACKET", 
            "LPAREN", "RPAREN", "COMMA", "ID", "NUMBER_LIT", "STRING_LIT", 
            "BOOLEAN_LIT", "NEWLINE", "COMMENTS", "WS", "ERROR_CHAR", "UNCLOSE_STRING", 
            "ILLEGAL_ESCAPE" ]

    ruleNames = [ "TRUE", "FALSE", "NUMBER", "BOOL", "STRING", "RETURN", 
                  "VAR", "DYNAMIC", "FUNC", "FOR", "UNTIL", "BY", "BREAK", 
                  "CONTINUE", "IF", "ELSE", "ELIF", "BEGIN", "END", "NOT", 
                  "AND", "OR", "ASSIGNINIT", "ADD", "SUB", "MUL", "DIV", 
                  "MODUL", "NOT_OP", "AND_OP", "OR_OP", "ASSIGN", "NOT_EQUAL", 
                  "LESS_THAN", "LESS_OR_EQUAL", "GREATER_THAN", "GREATER_OR_EQUAL", 
                  "CONCAT", "EQUAL", "LBRACKET", "RBRACKET", "LPAREN", "RPAREN", 
                  "COMMA", "ID", "NUMBER_LIT", "INT", "EXP", "STRING_LIT", 
                  "BOOLEAN_LIT", "NEWLINE", "COMMENTS", "WS", "ERROR_CHAR", 
                  "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[48] = self.STRING_LIT_action 
            actions[53] = self.ERROR_CHAR_action 
            actions[54] = self.UNCLOSE_STRING_action 
            actions[55] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRING_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1]
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

            		if(len(self.text) >= 2 and self.text[-1] == '\n' and self.text[-2] == '\r'):
            			raise UncloseString(self.text[1:-2])
            		elif(self.text[-1] == '\n'):
            			raise UncloseString(self.text[1:-1])
            		else:
            			raise UncloseString(self.text[1:])
            	
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise IllegalEscape(self.text[1:])
     


